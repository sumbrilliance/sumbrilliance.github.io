<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>夏四的博客</title>
    <link>https://summer4.dev/</link>
    <description>Recent content on 夏四的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>uyhhi1ss@gmail.com (夏四)</managingEditor>
    <webMaster>uyhhi1ss@gmail.com (夏四)</webMaster>
    <lastBuildDate>Thu, 10 Oct 2019 21:51:01 +0800</lastBuildDate>
    
	<atom:link href="https://summer4.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>(译)为什么要使用 Go 模块代理</title>
      <link>https://summer4.dev/2019/10/%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-go-%E6%A8%A1%E5%9D%97%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 10 Oct 2019 21:51:01 +0800</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2019/10/%E8%AF%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-go-%E6%A8%A1%E5%9D%97%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;p&gt;引入Go模块之后，我以为这就是最终解决方案了。我很快意识到事实并非如此。最近，大家开始提倡使用Go模块代理。在研究了利弊之后，我得出结论，这是近年来&lt;strong&gt;最重要的变化&lt;/strong&gt;之一。何处此言？是什么使Go模块代理如此特别？&lt;/p&gt;

&lt;p&gt;在Go模块中，如果你添加了新的依赖项或者在没有缓存过的新机器上构建Go模块，则它将（&lt;code&gt;go get&lt;/code&gt;）下载&lt;code&gt;go.mod&lt;/code&gt;中的所有依赖项，并将其缓存以用于进一步的操作。可以通过使用&lt;code&gt;vendor/&lt;/code&gt;文件夹并编译时携带&lt;code&gt;-mod=vendor&lt;/code&gt;参数来绕过缓存（以及下载依赖项）。&lt;/p&gt;

&lt;p&gt;但是这两种方法都不甚完美，我们有更好的方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用go调用eth踩坑笔记</title>
      <link>https://summer4.dev/2019/05/%E4%BD%BF%E7%94%A8go%E8%B0%83%E7%94%A8eth%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 18 May 2019 16:42:00 +0800</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2019/05/%E4%BD%BF%E7%94%A8go%E8%B0%83%E7%94%A8eth%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;项目中使用 go-ethereum 相关接口与以太坊网络进行交互，本文整理了中间遇到的一些坑，方便后来人对应来排错。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raft 算法理解和总结</title>
      <link>https://summer4.dev/2019/04/raft-%E7%AE%97%E6%B3%95%E7%90%86%E8%A7%A3%E5%92%8C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0800</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2019/04/raft-%E7%AE%97%E6%B3%95%E7%90%86%E8%A7%A3%E5%92%8C%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;Hyperledger fabric 自1.4.1版本开始支持了 Raft 共识，比原先的生产环境推荐共识&amp;rdquo;kafka&amp;rdquo;，搭建的复杂度和可维护性上要好不少，并且 1.4.0 是 Hyperledger的第一个长期维护版本(long term support)，推荐在生产环境中使用，完全可以升级并使用Raft共识。&lt;/p&gt;

&lt;p&gt;本文介绍总结Raft 算法，主要是根据著名的 &lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;Raft讲解动画&lt;/a&gt;的理解，并进行文字化的总结。强烈推荐这个讲解动画，可配合动画阅读下文，更容易理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://summer4.dev/about/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0800</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/about/</guid>
      <description>欢迎来到我的博客~ 半路出家打杂程序员，曾做过iOS开发，PHP开发，非主业语言包括JAVA，python，C++，javascript。目前从事golang开发。
原博客域名为 https://sumbrilliance.com 现已经(2019-03-01)迁移到目前域名下，原域名不再维护。
个人邮箱：uyhhi1ss@gmail.com
此博客模板来源于此github项目，采用现有模板节省了我大量的精力，使得我可以专注于撰写博文，在此对原作者表示感谢。</description>
    </item>
    
    <item>
      <title>fabric 主要模块和概念介绍和详细交易流程</title>
      <link>https://summer4.dev/2019/04/fabric-%E4%B8%BB%E8%A6%81%E6%A8%A1%E5%9D%97%E5%92%8C%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D%E5%92%8C%E8%AF%A6%E7%BB%86%E4%BA%A4%E6%98%93%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0800</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2019/04/fabric-%E4%B8%BB%E8%A6%81%E6%A8%A1%E5%9D%97%E5%92%8C%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D%E5%92%8C%E8%AF%A6%E7%BB%86%E4%BA%A4%E6%98%93%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;p&gt;本文将总结Hyperledger fabric 的主要模块、概念，以及详细的交易流程。以下总结基于 Hyperledger fabric 1.2版本。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker多容器实践：nginx&#43;go&#43;beego镜像做反向代理</title>
      <link>https://summer4.dev/2019/03/docker%E5%A4%9A%E5%AE%B9%E5%99%A8%E5%AE%9E%E8%B7%B5nginx-go-beego%E9%95%9C%E5%83%8F%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2019/03/docker%E5%A4%9A%E5%AE%B9%E5%99%A8%E5%AE%9E%E8%B7%B5nginx-go-beego%E9%95%9C%E5%83%8F%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
      <description>&lt;p&gt;本文通过一个简单的案例实践，描述了多容器多服务下如何对服务配置和关联。具体为&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基于 beego实现的一个 http服务，使用 go官方镜像，打包成一个容器1&lt;/li&gt;
&lt;li&gt;通过 go 容器，将1中的服务，简单修改，克隆出第二个 http，打包成容器2&lt;/li&gt;
&lt;li&gt;使用 nginx 镜像，生成一个反向代理容器，代理到对上述两个容器服务&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>使用 hugo 搭建github page 博客</title>
      <link>https://summer4.dev/2019/01/%E4%BD%BF%E7%94%A8-hugo-%E6%90%AD%E5%BB%BAgithub-page-%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Wed, 09 Jan 2019 10:58:08 -0400</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2019/01/%E4%BD%BF%E7%94%A8-hugo-%E6%90%AD%E5%BB%BAgithub-page-%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;p&gt;之前使用的 jekyll 搭建的 github pages 博客，最近重新整理博客，决意迁移到 hugo。&lt;/p&gt;

&lt;p&gt;本文介绍了这个博客迁移的过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pem、 .p12、cer、pkcs 等文件的区别</title>
      <link>https://summer4.dev/2018/12/pem-.p12cerpkcs-%E7%AD%89%E6%96%87%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2018/12/pem-.p12cerpkcs-%E7%AD%89%E6%96%87%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;p&gt;本文根据SO上面的一个的回答，对CSR 、pem、crt、cer等文件格式进行解释。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go 包管理</title>
      <link>https://summer4.dev/2018/10/go-%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0800</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2018/10/go-%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;golang 的包管理一直为人所诟病，从GOPATH到vendor再到vgo，都不太理想。于是出现了各种第三方的解决方案。最近发布的 1.11版本，官方推出了 go module，试图统一这种乱象，解决包管理方面的不足。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>entitlements授权机制</title>
      <link>https://summer4.dev/2017/04/entitlements%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2017/04/entitlements%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;在对ipa重签名的时候，你可能会疑惑，为什么可以用别的证书重签之后，ipa就可以安装，又为什么在重签的时候需要加入 embedded.mobileprovision 文件，重签失败出现的闪退又是为什么。那么也许你需要深入了解 entitlements 的验证机制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一次视频直播客户端逆向开发</title>
      <link>https://summer4.dev/2016/05/%E4%B8%80%E6%AC%A1%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%86%E5%90%91%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2016/05/%E4%B8%80%E6%AC%A1%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%86%E5%90%91%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;本文原计划是一个系列中的首篇，结果懒癌一犯，无限跳票，但是毕竟是废了心血写的，此次迁移，也做了保留，如果能对有些朋友有所参考，那就再好不过。&lt;/p&gt;

&lt;p&gt;本文介绍的主要是逆向的第一步，对想要逆向的ipa文件砸壳（去掉外层的加密保护）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过数据线直接ssh登陆到iOS设备</title>
      <link>https://summer4.dev/2016/05/%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%9B%B4%E6%8E%A5ssh%E7%99%BB%E9%99%86%E5%88%B0ios%E8%AE%BE%E5%A4%87/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2016/05/%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E7%BA%BF%E7%9B%B4%E6%8E%A5ssh%E7%99%BB%E9%99%86%E5%88%B0ios%E8%AE%BE%E5%A4%87/</guid>
      <description>&lt;p&gt;小黄书《iOS逆向工程》介绍的使用usb连接 iOS设备的方式是使用 usbmuxd，但是这个方式还是不够快速便捷，本文介绍了几种更方便的连接思路。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>float 在内存中的表示</title>
      <link>https://summer4.dev/2016/02/float-%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/</link>
      <pubDate>Sat, 06 Feb 2016 10:58:08 -0400</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/2016/02/float-%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/</guid>
      <description>&lt;p&gt;从学c语言就一直都知道浮点数有单精度双精度，后者精度较高，使用64位存储，前者使用32位。然而没有进一步了解过。这次看计算机专业导论，介绍了浮点数的内部存储规则，总结记录一下.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://summer4.dev/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://summer4.dev/other/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>uyhhi1ss@gmail.com (夏四)</author>
      <guid>https://summer4.dev/other/</guid>
      <description>等fdfsdf&amp;rsquo;dsfjkads</description>
    </item>
    
  </channel>
</rss>